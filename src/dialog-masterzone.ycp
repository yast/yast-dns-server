/**
 * File:	include/dns-server/dialog-masterzone.ycp
 * Package:	Configuration of DNS-server
 * Summary:	Definition of the master zone dialog
 * Authors:	Jiri Srain <jiri.srain@suse.cz>,
 *              Lukas Ocilka <lukas.ocilka@suse.cz>
 *
 * $Id$
 */

{

textdomain "dns-server";

import "Label";
import "Wizard";
import "DnsServer";
import "DnsFakeTabs";
import "DnsRoutines";
import "DnsServerAPI";
import "Confirm";
import "Hostname";
import "IP";
import "Popup";
import "DnsTsigKeys";
import "Mode";
import "Report";
import "DnsServerAPI";
import "Punycode";
import "DnsServer";
import "DnsServerHelperFunctions";

include "dns-server/misc.ycp";

// zone ACL -->

list <string> available_zones_to_connect = [];

integer max_text_record_length = 255;

/**
 * Dialog Tab - Zone Editor - Basics
 * @return term for Get_ZoneEditorTab()
 */
term GetMasterZoneEditorTabBasics () {
    list<map<string,string> > updater_keys_m = DnsTsigKeys::ListTSIGKeys ();
    list<string> updater_keys = maplist (map m, updater_keys_m, ``(
	m["key"]:""
    ));
    list<string> acl = DnsServer::GetAcl ();
    acl = maplist (string a, acl, {
	while (substring (a, 0, 1) == " " || substring (a, 0, 1) == "\t")
	    a = substring (a, 1);
	list<string> s = splitstring (a, " \t");
	string type = s[0]:"";
	return type;
    });
    acl = filter (string a, acl, ``(a != ""));
    acl = (list<string>)
	sort (merge (acl, ["any", "none", "localhost", "localnets"]));

    term expert_settings = `Empty();
    if (DnsServer::ExpertUI()) {
	expert_settings = `VBox (
	    `Left (`CheckBoxFrame (`id ("allow_ddns"), `opt (`notify),
		// check box
		_("A&llow Dynamic Updates"),
		true,
		`Left (`ReplacePoint (`id (`ddns_key_rp),
		    // combo box
	    	    `HSquash (`ComboBox (`id ("ddns_key"), `opt(`hstretch), _("TSIG &Key"), updater_keys))
    		))
	    )),
	    `VSpacing (1)
	);
    }

    // bug #203910
    // hide "none" from listed ACLs
    // "none" means, not allowed and thus multiselectbox of ACLs is disabled
    acl = filter (string one_acl, acl, {
	return one_acl != "none";
    });

    available_zones_to_connect = [];
    string zone_name = "";
    list <term> zones_to_connect = maplist (map z, zones, {
	zone_name = z["zone"]:"";

	// zone must be: reverse, not-internal, master
	if (DnsServerHelperFunctions::IsReverseZone (zone_name) || DnsServerHelperFunctions::IsInternalZone (zone_name) || z["type"]:"" != "master")
	    return nil;

	available_zones_to_connect = add (available_zones_to_connect, zone_name);

	return `item (`id (zone_name), Punycode::DecodeDomainName (zone_name));
    });
    zones_to_connect = sort (filter (term one_zone, zones_to_connect, {
	return (one_zone != nil);
    }));

    list <string> zones_connected = DnsServer::GetWhichZonesAreConnectedWith (current_zone["zone"]:"");
    y2milestone ("Connected with zone %1: %2", current_zone["zone"]:"", zones_connected);

    term contents = `VBox (
	expert_settings,
	`Left (
	    `CheckBoxFrame (
		`id ("enable_zone_transport"), `opt (`notify),
		// check box
		_("Enable &Zone Transport"),
		true,
		// multi selection box
		`VSquash (`HSquash (`MinWidth (30, `MultiSelectionBox (`id ("acls_list"), _("ACLs"), acl))))
	    )
	),
	`VSpacing (1),
	// Reverse zones can be automatically generated
	(DnsServerHelperFunctions::IsReverseZone (current_zone["zone"]:"") == true ?
	    `Left (
		`CheckBoxFrame (
		    `id ("generate_from_forward_zone"), `opt (`notify),
		    // check box
		    _("A&utomatically Generate Records From"),
		    true,
		    // multi selection box
		    `VSquash (`HSquash (`MinWidth (30,
			`ComboBox (`id ("generate_from_forward_zone_sel"), _("Zon&e"), zones_to_connect)
		    )))
		)
	    )
	    :
	    (size (zones_connected) > 0 ?
		`Left (
		    `Frame (
			// frame label
			_("Connected Reverse Zones"),
			`VBox (
			    `Label (
				mergestring (zones_connected, "\n")
			    )
			)
		    )
		)
		:
		`Empty()
	    )
	),
	`VStretch ()
    );

    return contents;
}

void ZoneAclInit () {
    boolean allowed = false;
    list<string> keys = [];
    foreach (map m, current_zone["options"]:[], ``{
        if (m["key"]:"" == "allow-transfer" && ! allowed)
        {
            string key = regexpsub (
                m["value"]:"",
                "^.*\\{[ \t]*(.*)[ \t]*\\}.*$",
                "\\1");
            if (key != nil)
            {
		keys = splitstring (key, " ;");
		keys = filter (string k, keys, ``(k != ""));
                allowed = true;
            }
        }
    });

    // bug #203910
    // no keys in allow-transfer means that transfer is allowed for all
    // explicitly say that
    if (size (keys) == 0) {
	allowed = true;
	keys = ["any"];
    // the only way how to disable the transfer is to set "allow-transfer { none; };"
    // "none" must be alone, remove it from the list, it is not present in the multi-sel box
    } else if (size (keys) == 1 && keys == ["none"]) {
	allowed = false;
	keys = [];
    }

    UI::ChangeWidget (`id ("enable_zone_transport"), `Value, allowed);
    UI::ChangeWidget (`id ("acls_list"), `Enabled, allowed);
    if (allowed)
    {
        UI::ChangeWidget (`id ("acls_list"), `SelectedItems, keys);
    }
}

void ZoneConnectedWithInit () {
    if (DnsServerHelperFunctions::IsReverseZone (current_zone["zone"]:"") == true) {
	if (current_zone["connected_with"]:"" != "" && contains (available_zones_to_connect, current_zone["connected_with"]:"")) {
	    UI::ChangeWidget (`id ("generate_from_forward_zone_sel"), `Value, current_zone["connected_with"]:"");
	    UI::ChangeWidget (`id ("generate_from_forward_zone"), `Value, true);
	} else {
	    UI::ChangeWidget (`id ("generate_from_forward_zone"), `Value, false);
	}
    }
}

void ZoneAclStore () {
    current_zone["options"] = maplist (map m, current_zone["options"]:[], ``{
        if (m["key"]:"" == "allow-transfer"
            && regexpmatch (m["value"]:"", "^.*\\{[ \t]*(.*)[ \t]*\\}.*$"))
        {
            return $[];
        }
        return m;
    });
    current_zone["options"] = filter (map m, current_zone["options"]:[], ``(
        m != $[]
    ));
    list<string> keys = (list<string>)
	UI::QueryWidget (`id ("acls_list"), `SelectedItems);
    boolean allowed = (boolean)
	UI::QueryWidget (`id ("enable_zone_transport"), `Value);


    // bug #203910
    // always store the allow-transfer option explicitly
    // if zone transfer is not allowed, set allow-transfer to { none; };
    if (! allowed) {
	keys = ["none"];
	y2milestone("ZoneTransfer not allowed, keys: %1", keys);
    // otherwise set selected keys
    } else {
	y2milestone("Zone transfer is allowed, keys: %1", keys);
	// no ACL selected means "any" is selected by default
    	if (size (keys) == 0) {
	    keys = ["any"];
	}
    }

    // store either "none" (transfer disabled) or "all" (transfer enabled)
    // or selected ACLs (transfer enabled for selected ACLs)
    current_zone["options"] = add (
	current_zone["options"]:[], $[
    	    "key" : "allow-transfer",
    	    "value" : sformat ("{ %1; }", mergestring (keys, "; ")),
	]
    );
}

void ZoneConnectedWithStore () {
    if (DnsServerHelperFunctions::IsReverseZone (current_zone["zone"]:"")) {
	if ((boolean) UI::QueryWidget (`id ("generate_from_forward_zone"), `Value) == true) {
	    current_zone["connected_with"] = (string) UI::QueryWidget (`id ("generate_from_forward_zone_sel"), `Value);

	} else {
	    current_zone["connected_with"] = "";
	}

	y2milestone ("Zone '%1' connected with '%2'", current_zone["zone"]:"", current_zone["connected_with"]:"");
    }
}

void ZoneAclHandle (map event) {
    any ret = event["ID"]:nil;
    UI::ChangeWidget (`id ("acls_list"), `Enabled,
	(boolean)UI::QueryWidget (`id ("enable_zone_transport"), `Value));
}

// <-- zone ACL

// --> zone Basic

/**
 * Initialize the tab of the dialog
 */
void InitZoneBasicsTab () {
    SetDNSSErverIcon();

    boolean allowed = false;
    string key = nil;
    foreach (map m, current_zone["options"]:[], ``{
        if (m["key"]:"" == "allow-update" && ! allowed)
        {
            key = regexpsub (
                m["value"]:"",
                "^.*key[ \t]+([^ \t;]+)[ \t;]+.*$",
                "\\1");
            if (key != nil)
            {
                allowed = true;
            }
        }
    });
    if (DnsServer::ExpertUI()) {
	UI::ChangeWidget (`id ("allow_ddns"), `Value, allowed);
	UI::ChangeWidget (`id ("ddns_key"), `Enabled, allowed);

	if (allowed) {
    	    UI::ChangeWidget (`id ("ddns_key"), `Value, key);
	}
    }

    ZoneAclInit();
    ZoneConnectedWithInit();
}

/**
 * Store settings of a tab of a dialog
 */
void StoreZoneBasicsTab () {
    current_zone["options"] = maplist (map m, current_zone["options"]:[], ``{
        if (m["key"]:"" == "allow-update"
            && regexpmatch (m["value"]:"", "^.*key[ \t]+[^ \t;]+[ \t;]+.*$"))
        {
            return $[];
        }
        return m;
    });
    current_zone["options"] = filter (map m, current_zone["options"]:[], ``(
        m != $[]
    ));

    if (DnsServer::ExpertUI()) {
	string key = (string)UI::QueryWidget (`id ("ddns_key"), `Value);
	boolean allowed = (boolean)UI::QueryWidget (`id ("allow_ddns"), `Value);
	if (allowed) {
    	    current_zone["options"] = add (current_zone["options"]:[], $[
        	"key" : "allow-update",
        	"value" : sformat ("{ key %1; }", key),
    	    ]);
	}
    }
    ZoneAclStore();
    ZoneConnectedWithStore();
}

/**
 * Handle events in a tab of a dialog
 */
symbol HandleZoneBasicsTab (map event) {
    any ret = event["ID"]:nil;

    if (DnsServer::ExpertUI()) {
	if (ret == "allow_ddns" && Mode::config ()) {
	    // popup message
	    Popup::Message (_("This function is not available during
preparation for autoinstallation.
"));
	    UI::ChangeWidget (`id ("allow_ddns"), `Value, false);
	    return nil;
	}
	if (ret == "allow_ddns"
	    && (boolean)UI::QueryWidget (`id ("allow_ddns"), `Value)
	    && size (DnsTsigKeys::ListTSIGKeys ()) == 0
	) {
	    // error report
	    Report::Error (_("No TSIG key is defined."));
	    UI::ChangeWidget (`id ("allow_ddns"), `Value, false);
	}
	UI::ChangeWidget (`id ("ddns_key"), `Enabled,
	    (boolean)UI::QueryWidget (`id ("allow_ddns"), `Value));
    }

    ZoneAclHandle (event);
    return nil;
}

// <-- zone Basic

// --> zone NS

/**
 * Dialog Tab - Zone Editor - Name Servers
 * @return term for Get_ZoneEditorTab()
 */
term GetMasterZoneEditorTabNameServers () {
    term contents =
	`VBox (
	    `VSquash (
		`HBox (
		    `HWeight ( 7,
			// Textentry - adding nameserver
			`InputField ( `id ( "add_name_server" ), `opt (`hstretch), _("&Name Server to Add") )
		    ),
		    `HWeight ( 2,
			`VBox (
			    `VStretch (),
			    `VSquash ( `PushButton ( `id ( "add_ns" ), `opt ( `hstretch ), Label::AddButton () ) )
			)
		    )
		)
	    ),
	    `HBox (
		`HWeight ( 7,
		  `ReplacePoint (`id ("name_server_list_rp"),
		    // Selectionbox - listing current nameservers
		    `SelectionBox ( `id ( "name_server_list" ), `opt ( `hstretch ), _("Na&me Server List"), []
		    )
		  )
		),
		`HWeight ( 2,
		    `VBox (
			`VSquash( `VSpacing ( 1 ) ),
			`VSquash ( `PushButton ( `id ( "delete_ns" ), `opt ( `hstretch ), Label::DeleteButton () ) ),
			`VStretch ()
		    )
		)
	    )
	);
    return contents;
}

void RedrawNsListWidget () {
    UI::ReplaceWidget (
	`id ("name_server_list_rp"),
	    `SelectionBox (
		`id ("name_server_list"),
    		// selection box label
		_("Na&me Server List"),
    		Punycode::DocodeDomainNames(current_zone_ns)
	    )
	);
}

///**
// * Setting ValidChars for dialog
// */
//void ValidCharsNsListWidget () {
//    UI::ChangeWidget( `id ("add_name_server"), `ValidChars, Hostname::ValidCharsFQ);
//}

void RegenerateCurrentZoneNS () {
    string zone_name = current_zone["zone"]:"";
    list<map> records = filter (map r, (list<map>)(current_zone["records"]:[]), ``(
        r["type"]:"" == "NS"
        && (r["key"]:"" == sformat ("%1.", zone_name)
	    || r["key"]:"" == "@")
    ));
    current_zone_ns = maplist (map r, records, ``(r["value"]:""));
    current_zone_ns = filter (string z, current_zone_ns, ``(z != ""));
    y2milestone ("NSs: %1", current_zone_ns);
}

/**
 * Initialize the tab of the dialog
 */
void InitNsListTab () {
    RegenerateCurrentZoneNS();
    RedrawNsListWidget ();
    //ValidCharsNsListWidget ();
}

/**
 * Store settings of a tab of a dialog
 */
void StoreNsListTab () {
    string zone_name = current_zone["zone"]:"";
    list records = filter (map r, current_zone["records"]:[], ``(
	! (r["type"]:"" == "NS"
	&& (r["key"]:"" == sformat ("%1.", zone_name)
	    || r["key"]:"" == zone_name
	    || r["key"]:"" == "@"))
    ));
    list new_rec = maplist (string a, current_zone_ns, ``(
	$[
	    "key" : sformat ("%1.", zone_name),
	    "type" : "NS",
	    "value" : a,
	]
    ));
    current_zone["records"] = merge (new_rec, records);
}

/**
 * Handle events in a tab of a dialog
 */
symbol HandleNsListTab (map event) {
    any ret = event["ID"]:nil;

    if (ret == "add_ns")
    {
	string zn = current_zone["zone"]:"" + ".";

	// NS is converted to the Punycode first
	string new_ns_entered = (string)
	    UI::QueryWidget (`id ("add_name_server"), `Value);
	string new_ns = Punycode::EncodeDomainName(new_ns_entered);
	y2milestone("New NS: %1", new_ns);

	string check_ns = new_ns;
	if (regexpmatch (check_ns, "^.*\\.$"))
	    check_ns = regexpsub (check_ns, "^(.*)\\.$", "\\1");

	// validating name server
	if ( Hostname::Check(check_ns) != true && Hostname::CheckFQ(check_ns) != true)
	{
	    UI::SetFocus ( `id ("add_name_server") );
	    // A popup error message
	    Popup::Error (Hostname::ValidDomain ());
	    return nil;
	}
	// absolute hostname
	if (regexpmatch (new_ns, "\\..*[^.]$"))
	{
	    new_ns = new_ns + ".";
	}
	else if (regexpmatch (new_ns, "^[^.]*$"))
	{
	    new_ns = sformat ("%1.%2", new_ns, zn);
	}
	if (contains (current_zone_ns, new_ns))
	{
	    UI::SetFocus (`id ("add_name_server") );
	    // error message
	    Popup::Error (_("The specified name server already exists."));
	    return nil;
	}
	
	DnsServerHelperFunctions::HandleNsupdate ($["type":"NS", "key":zn, "value":new_ns], "add", current_zone);

	current_zone_ns = add (current_zone_ns, new_ns);
	RedrawNsListWidget ();
    }
    else if (ret == "delete_ns")
    {
	string selected = (string)
	    UI::QueryWidget (`id ("name_server_list"), `CurrentItem);
	current_zone_ns
	    = filter (string ns, current_zone_ns, ``(ns != selected));
	RedrawNsListWidget ();

	string zn = current_zone["zone"]:"" + ".";
	DnsServerHelperFunctions::HandleNsupdate ($["type":"NS", "key":zn, "value":selected], "delete", current_zone);
    }
    return nil;
}

// <-- zone NS

// --> zone MX

/**
 * Dialog Tab - Zone Editor - Mail Servers
 * @return term for Get_ZoneEditorTab()
 */
term GetMasterZoneEditorTabMailServers () {
    term contents =
	`VBox (
	    `VSquash (
		`Frame (
		    // Frame label - adding mail server
		    _("Mail Server to Add"),
		    `VBox (
			`HBox (
			    `HWeight ( 7,
				`HBox (
				    // Textentry - addind mail server - Name
				    `InputField ( `id ( "add_mail_server" ), `opt (`hstretch), _("&Address") ),
				    // IntField - adding mail server - Priority
				    `IntField ( `id ( "add_priority" ), _("&Priority"), 0, 65535, 0 )
				)
			    ),
			    `HWeight ( 2,
				`VBox (
				    `VStretch(),
				    `VSquash ( `PushButton ( `id ( "add_mx" ), `opt ( `hstretch ), Label::AddButton () ) )
				)
			    )
			),
			`VSpacing (0.5)
		    )
		)
	    ),
	    `HBox (
		`HWeight ( 7,
		    `VBox (
			// Table label - listing mail servers
			`Left ( `Label ( _("Mail Relay List") ) ),
			`Table ( `id ( "mail_server_list" ), `header (
				// Table header item - listing mail servers
				_("Mail Server"),
				// Table header item - listing mail servers
				_("Priority")
			    ), []
			)
		    )
		),
		`HWeight ( 2,
		    `VBox (
			`VSquash( `VSpacing ( 1 ) ),
			`VSquash ( `PushButton ( `id ( "delete_mx" ), `opt ( `hstretch ), Label::DeleteButton () ) ),
			`VStretch ()
		    )
		)
	    )
	);
    return contents;
}

void RedrawMxListWidget () {
    list <string> zone_mx_decoded = Punycode::DocodeDomainNames(current_zone_mx);

    integer index = -1;
    // create term items using already translated strings
    list <term> items = maplist (string one_mx, zone_mx_decoded, {
	string one_address_name = one_mx;
	one_address_name = regexpsub(one_address_name, "^[0123456789]+[ \t]+(.*)$", "\\1");
	
	string one_priority = one_mx;
	one_priority = regexpsub(one_priority, "^([0123456789]+)[ \t]+.*$", "\\1");
	
	index = index + 1;
	return `item (`id (index), one_address_name, one_priority);
    });
    
    items = sort (term x, term y, items, ``(x[1]:"" < y[2]:""));

    // initialize the widget content
    UI::ChangeWidget (`id ("mail_server_list"), `Items, items);
}

///**
// * Setting ValidChars for dialog
// */
//void ValidCharsMxListTab () {
//    UI::ChangeWidget( `id ("add_mail_server"), `ValidChars, Hostname::ValidCharsFQ);
//}

/**
 * Initialize the tab of the dialog
 */
void InitMxListTab () {
    string zone_name = current_zone["zone"]:"";
    list<map> records = filter (map r, (list<map>)(current_zone["records"]:[]), ``(
        r["type"]:"" == "MX"
        && (r["key"]:"" == sformat ("%1.", zone_name)
	    || r["key"]:"" == "@")
    ));
    current_zone_mx = maplist (map r, records, ``(r["value"]:""));
    current_zone_mx = filter (string z, current_zone_mx, ``(z != ""));

    RedrawMxListWidget ();
}

/**
 * Store settings of a tab of a dialog
 */
void StoreMxListTab () {
    string zone_name = current_zone["zone"]:"";
    list records = filter (map r, current_zone["records"]:[], ``(
	! (r["type"]:"" == "MX"
	&& (r["key"]:"" == sformat ("%1.", zone_name)
	    || r["key"]:"" == zone_name
	    || r["key"]:"" == "@"))
    ));
    list new_rec = maplist (string a, current_zone_mx, ``(
	$[
	    "key" : sformat ("%1.", zone_name),
	    "type" : "MX",
	    "value" : a,
	]
    ));
    current_zone["records"] = merge (new_rec, records);
}

/**
 * Handle events in a tab of a dialog
 */
symbol HandleMxListTab (map event) {
    any ret = event["ID"]:nil;

    if (ret == "add_mx")
    {
	string new_mx_decoded = (string)
	    UI::QueryWidget (`id ("add_mail_server"), `Value);
	string new_mx = Punycode::EncodeDomainName(new_mx_decoded);

	integer prio = (integer)UI::QueryWidget (`id ("add_priority"), `Value);
	// maximal priority is 65535
	if (prio > 65535) {
	    prio = 65535;
	    UI::ChangeWidget (`id ("add_priority"), `Value, 65535);
	}

	string zn = current_zone["zone"]:"" + ".";

	string check_mx = new_mx;
	if (regexpmatch (check_mx, "^.*\\.$"))
	    check_mx = regexpsub (check_mx, "^(.*)\\.$", "\\1");

	// validating mail server
	if (Hostname::Check(check_mx) != true && Hostname::CheckFQ(check_mx) != true)
	{
	    UI::SetFocus ( `id ("add_mail_server") );
	    // A popup error message
	    Popup::Error ( _("The specified value is not a valid hostname or IP address.") );
	    return nil;
	}

	// absolute hostname
	if (regexpmatch (new_mx, "\\..*[^.]$")) {
	    new_mx = new_mx + ".";
	}
	// relative hostname
	else if (regexpmatch (new_mx, "^[^.]*$"))
	{
	    new_mx = sformat ("%1.%2", new_mx, zn);
	}

	list<string> mx_list_check = filter (string mx, current_zone_mx, {
	    list<string> split = splitstring (mx, " \t");
	    split = filter (string s, split, ``(s != ""));
	    string address = split[1]:"";
	    return address == new_mx;
	});
	if (size (mx_list_check) > 0)
	{
	    UI::SetFocus (`id ("add_name_server") );
	    // error message
	    Popup::Error (_("The specified mail server already exists."));
	    return nil;
	}

	new_mx = sformat ("%1 %2", prio, new_mx);
	y2milestone("New MX: %1", new_mx);
	
	DnsServerHelperFunctions::HandleNsupdate($["type":"MX", "key":zn, "value":new_mx], "add", current_zone);

	current_zone_mx = add (current_zone_mx, new_mx);
	RedrawMxListWidget ();
    }
    else if (ret == "delete_mx")
    {
	integer selected = (integer)
	    UI::QueryWidget (`id ("mail_server_list"), `CurrentItem);
	string selected_value = current_zone_mx[selected]:"";
	current_zone_mx[selected] = nil;
	current_zone_mx
	    = filter (string mx, current_zone_mx, ``(mx != nil));
	RedrawMxListWidget ();
	
	string zn = current_zone["zone"]:"" + ".";
	DnsServerHelperFunctions::HandleNsupdate ($["type":"MX", "key":zn, "value":selected_value], "delete", current_zone);
    }
    return nil;
}

// <-- zone MX

// --> zone SOA

/**
 * Dialog Tab - Zone Editor - Zone Settings
 * @return term for Get_ZoneEditorTab()
 */
term GetMasterZoneEditorTabSOASettings () {

    list dns_units = [
	// DNS Settings time units (combobox item)
	`item ( `id ( "" ),   _("Seconds") ),
	// DNS Settings time units (combobox item)
	`item ( `id ( "m" ),  _("Minutes") ),
	// DNS Settings time units (combobox item)
	`item ( `id ( "h" ),  _("Hours") ),
	// DNS Settings time units (combobox item)
	`item ( `id ( "d" ),   _("Days") ),
	// DNS Settings time units (combobox item)
	`item ( `id ( "w" ),  _("Weeks") )
    ];

    term contents =
	`VBox (
	    `HBox (
		`HWeight ( 50,
		    `VBox (
			// Textentry - setting Serial for zone
			`InputField ( `id ( "zone_settings_serial" ), `opt ( `hstretch ), _("Seri&al"), "" ),
			`VSpacing ( 1 ),
			`HBox (
			    // Textentry - setting TTL for zone
			    `IntField ( `id ( "zone_settings_ttl_value" ), `opt ( `hstretch ), _("TT&L"), 0, 9999999, 0 ),
			    `ComboBox ( `id ( "zone_settings_ttl_units" ), _("&Unit"), dns_units )
			),
			`VStretch ()
		    )
		),
		`HSpacing ( 2 ),
		`HWeight ( 50,
		    `VBox (
			`HBox ( `opt ( `hstretch ),
			    // IntField - Setting DNS Refresh - Value
			    `IntField ( `id ( "zone_settings_refresh_value" ), _("Re&fresh"), 0, 9999999, 0 ),
			    // Combobox - Setting DNS Refresh - Unit
			    `ComboBox ( `id ( "zone_settings_refresh_units" ), _("Un&it"), dns_units )
			),
			`HBox ( `opt ( `hstretch ),
			    // IntField - Setting DNS Retry - Value
			    `IntField ( `id ( "zone_settings_retry_value" ), _("Retr&y"), 0, 9999999, 0 ),
			    // Combobox - Setting DNS Retry - Unit
			    `ComboBox ( `id ( "zone_settings_retry_units" ), _("&Unit"), dns_units )
			),
			`HBox ( `opt ( `hstretch ),
			    // IntField - Setting DNS Expiry - Value
			    `IntField ( `id ( "zone_settings_expiry_value" ), _("Ex&piration"), 0, 9999999, 0 ),
			    // Combobox - Setting DNS Expiry - Unit
			    `ComboBox ( `id ( "zone_settings_expiry_units" ), _("U&nit"), dns_units )
			),
			`HBox ( `opt ( `hstretch ),
			    // IntField - Setting DNS Minimum - Value
			    `IntField ( `id ( "zone_settings_minimum_value" ), _("&Minimum"), 0, 9999999, 0 ),
			    // Combobox - Setting DNS Minimum - Unit
			    `ComboBox ( `id ( "zone_settings_minimum_units" ), _("Uni&t"), dns_units )
			),
			`VStretch ()
		    )
		)
	    )
	);
    return contents;
}

define string num2unit (string num) {
    string unit = filterchars (tolower (num), "smhdw");
    if (size (unit) == 0)
	return "";
    unit = substring (unit, 0, 1);
    if (unit == "s")
	unit = "";
    return unit;
}

/**
 * Initialize the tab of the dialog
 */
void InitSoaTab () {
    UI::ChangeWidget (`id ("zone_settings_serial"), `Value,
	current_zone["soa", "serial"]:"");

    map <string, string> map_ids_to_values = $[
	"zone_settings_ttl"     : "ttl",
	"zone_settings_refresh" : "refresh",
	"zone_settings_retry"   : "retry",
	"zone_settings_expiry"  : "expiry",
	"zone_settings_minimum" : "minimum",
    ];

    foreach (string id, string value, map_ids_to_values, {
	integer time_int = 0;
	if (id == "zone_settings_ttl") {
	    time_int = DnsServerAPI::TimeToSeconds((string) current_zone[value]:"0S");
	} else {
	    time_int = DnsServerAPI::TimeToSeconds((string) current_zone["soa", value]:"0S");
	}
	string time_str = DnsServerAPI::SecondsToHighestTimeUnit(time_int);
	
	UI::ChangeWidget (`id (id + "_value"), `Value, tointeger(filterchars (time_str, "0123456789")));
	UI::ChangeWidget (`id (id + "_units"), `Value, tolower(filterchars (time_str, "WwDdHhMmSs")));
    });

    UI::ChangeWidget (`id ("zone_settings_serial"), `ValidChars, "0123456789");
}

/**
 * Store settings of a tab of a dialog
 */
void StoreSoaTab () {
    current_zone["ttl"] = sformat ("%1%2",
	UI::QueryWidget (`id ("zone_settings_ttl_value"), `Value),
	UI::QueryWidget (`id ("zone_settings_ttl_units"), `Value));

    current_zone["soa"] = current_zone["soa"]:$[];
    current_zone["soa", "serial"]
	= UI::QueryWidget (`id ("zone_settings_serial"), `Value);
    current_zone["soa", "refresh"] = sformat ("%1%2",
	UI::QueryWidget (`id ("zone_settings_refresh_value"), `Value),
	UI::QueryWidget (`id ("zone_settings_refresh_units"), `Value));
    current_zone["soa", "retry"] = sformat ("%1%2",
	UI::QueryWidget (`id ("zone_settings_retry_value"), `Value),
	UI::QueryWidget (`id ("zone_settings_retry_units"), `Value));
    current_zone["soa", "expiry"] = sformat ("%1%2",
	UI::QueryWidget (`id ("zone_settings_expiry_value"), `Value),
	UI::QueryWidget (`id ("zone_settings_expiry_units"), `Value));
    current_zone["soa", "minimum"] = sformat ("%1%2",
	UI::QueryWidget (`id ("zone_settings_minimum_value"), `Value),
	UI::QueryWidget (`id ("zone_settings_minimum_units"), `Value));

    string zn = current_zone["zone"]:"" + ".";
    current_zone["update_actions"] = add(current_zone["update_actions"]:[], $[
	"operation"	: "add",
	"type"		: "SOA",
	"key"		: zn,
	"value"		: (string)
	    current_zone["soa", "server"]:"."		+ " " +
	    current_zone["soa", "mail"]:"root."		+ " " +
	    current_zone["soa", "serial"]:"1111111111"	+ " " +
	    current_zone["soa", "refresh"]:"3h"		+ " " +
	    current_zone["soa", "retry"]:"1h"		+ " " +
	    current_zone["soa", "expiry"]:"1w"		+ " " +
	    current_zone["soa", "minimum"]:"1d"		+ " ",
    ]);
}

/**
 * Handle events in a tab of a dialog
 */
symbol HandleSoaTab (map event) {
    return nil;
}

boolean ValidateSoaTab (map event) {
    string serial = (string)
	UI::QueryWidget (`id ("zone_settings_serial"), `Value);
    if (serial == "")
    {
	UI::SetFocus (`id ("zone_settings_serial"));
	Popup::Error (_("The serial number of the zone must be specified."));
	return false;
    }
    if (size (serial) > 10)
    {
	UI::SetFocus (`id ("zone_settings_serial"));
	Popup::Error (sformat (
	    // error report, %1 is an integer
	    _("The serial number must be no more than %1 digits long."), 10));
	return false;
    }
    string refresh_str = sformat ("%1%2",
	UI::QueryWidget (`id ("zone_settings_refresh_value"), `Value),
	UI::QueryWidget (`id ("zone_settings_refresh_units"), `Value));
    string expiry_str = sformat ("%1%2",
	UI::QueryWidget (`id ("zone_settings_expiry_value"), `Value),
	UI::QueryWidget (`id ("zone_settings_expiry_units"), `Value));
    integer refresh = tointeger (DnsRoutines::NormalizeTime (refresh_str));
    integer expiry = tointeger (DnsRoutines::NormalizeTime (expiry_str));
    if (expiry < refresh)
    {
	// TRANSLATORS: A popup with question, current setting could produce errors
	if (! Popup::YesNo (_("The expiration time-out is higher than the time period
of zone refreshes. The zone will not be reachable
from slave name servers all the time.
Continue?")))
	{
	    return false;
	}
    }
    return true;
}

// <-- zone SOA

// --> zone RECORDS

list supported_records = [];

string last_add_record_type = nil;

term GetEditationWidgets (string rec_type) {
    term ret = nil;

    switch (rec_type) {
	// "MX"
	case "MX":
	    ret = `HBox (
		// Textentry - zone settings - Record Name
		`Top (`InputField (`id ("add_record_name"), `opt (`hstretch), _("&Record Key"))),
		// Combobox - zone settings - Record Type
		`Top (`ComboBox (`id ("add_record_type"), `opt (`notify), _("T&ype"), supported_records)),
		// IntField - zone settings - Record Value
		`Top (`HSquash (`IntField (`id ("add_record_prio"), `opt (`hstretch), _("&Priority"), 0, 65535, 0))),
		// Textentry - zone settings - Record Value
		`Top (`InputField (`id ("add_record_val"), `opt (`hstretch), _("Val&ue")))
	    );

	    break;

	// "SRV"
	case "SRV":
	    ret = `HBox (
		`VBox (
		    // Textentry - zone settings - Record Name
		    `InputField (`id ("add_record_name"), `opt (`hstretch), _("&Record Key")),
		    `HBox (
			// Textentry - zone settings - Record Name
			`ComboBox (`id ("add_record_service"), `opt (`editable, `hstretch), _("&Service"), [
			    `item ("_http"),
			    `item ("_ftp"),
			    `item ("_imap"),
			    `item ("_ldap"),
			    `item ("_PK"),
			    `item ("_XREP"),
			]),
			// Textentry - zone settings - Record Name
			`ComboBox (`id ("add_record_protocol"), `opt (`editable, `hstretch), _("&Protocol"), [
			    `item ("_tcp"),
			    `item ("_udp"),
			]),
			`HStretch()
		    )
		),
		`Top (
		    // Combobox - zone settings - Record Type
		    `ComboBox (`id ("add_record_type"), `opt (`notify), _("T&ype"), supported_records)
		),
		`VBox (
		    // IntField - zone settings - Record Value
		    `InputField (`id ("add_record_val"), `opt (`hstretch), _("Val&ue")),
		    `HBox (
			// IntField - zone settings - Record Value
			`IntField (`id ("add_record_prio"), _("&Priority"), 0, 65535, 0),
			// IntField - zone settings - Record Value
			`IntField (`id ("add_record_weight"), _("&Weight"), 0, 65535, 0),
			// IntField - zone settings - Record Value
			`IntField (`id ("add_record_port"), _("&Port"), 0, 65535, 0)
		    )
		)
	    );

	    break;

	// "A", "AAAA", "CNAME", "NS", "PTR", "TXT", "SPF"
	default:
	    ret = `HBox (
		// Textentry - zone settings - Record Name
		`Top (`InputField (`id ("add_record_name"), `opt (`hstretch), _("&Record Key"))),
		// Combobox - zone settings - Record Type
		`Top (`ComboBox (`id ("add_record_type"), `opt (`notify), _("T&ype"), supported_records)),
		// Textentry - zone settings - Record Value
		`Top (`InputField (`id ("add_record_val"), `opt (`hstretch), _("Val&ue")))
	    );

	    break;
    };

    return ret;
}

// current RR type used in `ReplacePoint (`id ("rr_rp"))
term current_rr_rp = nil;

/**
 * Dialog Tab - Zone Editor - Records
 * @return term for Get_ZoneEditorTab()
 */
term GetMasterZoneEditorTabRecords () {
    // reverse zone
    if (DnsServerHelperFunctions::IsReverseZone (current_zone["zone"]:"")) {
	supported_records = [ "PTR", "NS" ];
    } else {
	supported_records = [ "A", "AAAA", "CNAME", "NS", "MX", "SRV", "TXT", "SPF" ];
    }

    map record_type_descriptions = $[
	"A"	: _("A: IPv4 Domain Name Translation"),
	"AAAA"	: _("AAAA: IPv6 Domain Name Translation"),
	"CNAME"	: _("CNAME: Alias for Domain Name"),
	"NS"	: _("NS: Name Server"),
	"MX"	: _("MX: Mail Relay"),
	"PTR"	: _("PTR: Reverse Translation"),
	"SRV"	: _("SRV: Services Record"),
	"TXT"	: _("TXT: Text Record"),
	"SPF"	: _("SPF: Sender Policy Framework"),
    ];

    supported_records = maplist (any one_rec_type, supported_records, ``(
	`item (`id (one_rec_type), record_type_descriptions[one_rec_type]:one_rec_type)
    ));

    current_rr_rp = GetEditationWidgets (nil);

    term contents =
	`VBox (
	    `HStretch(),
	    `VSquash (
		// Frame label - Adding/Changing IP/CNAME/Type... zone settings
		`Frame ( _("Record Settings"),
		    `VBox (
			`HBox (
			    `HWeight (11,
				// Will be replaced with another box of widgets
				// after selecting another RR type
				`ReplacePoint (`id ("rr_rp"), current_rr_rp)
			    ),
			    `HWeight ( 2,
				`VBox (
				    `VSpacing (2),
				    // Pushbutton - Change Record
				    `VSquash ( `PushButton ( `id ( "change_record" ), `opt ( `hstretch ), _("C&hange") ) ),
				    `VSquash ( `PushButton ( `id ( "add_record" ), `opt ( `hstretch ), Label::AddButton () ) )
				)
			    )
			)
		    )
		)
	    ),
	    `VSpacing (0.5),
	    // Table label - Records listing
	    `Left ( `Label (_("Configured Resource Records") ) ),
	    `HBox (
		`HWeight ( 11,
		    `VBox (
			`Table ( `id ( "records_list" ),
			    `opt (`notify, `immediate),
			    `header (
			    // Table menu item - Records listing
			    _("Record Key"),
			    // Table menu item - Records listing
			    _("Type"),
			    // Table menu item - Records listing
			    _("Value")
			    ), [
			])
		    )
		),
		`HWeight ( 2,
		    `VBox (
			`VSquash ( `PushButton ( `id ( "delete_record" ), `opt ( `hstretch ), Label::DeleteButton () ) ),
			`VStretch ()
		    )
		)
	    )
	);
    return contents;
}

void AdjustEditationWidgets (map current_record, string & decoded_zone_name, string & zone_name) {
	string current_type = current_record["type"]:"A";

	string current_key = current_record["key"]:"";
	string current_val = current_record["value"]:"";

	string current_service	= "";
	string current_protocol	= "";

	integer current_prio	= 0;
	integer current_weight	= 0;
	integer current_port	= 0;

	switch (current_type) {
	    // "SRV"
	    case "SRV":

		if (regexpmatch (current_key, "^_[^_]+\\._[^_]+\\.?")) {
		    current_service	= regexpsub (current_key, "^(_[^_]+)\\._[^_]+\\.?.*", "\\1");
		    current_protocol	= regexpsub (current_key, "^_[^_]+\\.(_[^\\.]+)\\.?.*", "\\1");
		    current_key		= regexpsub (current_key, "^_[^_]+\\._[^\\.]+\\.?(.*)$", "\\1");

		    // not to show an empty string
		    if (current_key == "") current_key = zone_name + ".";
		} else if (current_key != "" && regexpmatch (current_key, "[ \\t]")) {
		    y2error ("Invalid record key: %1", current_key);
		}

		UI::ChangeWidget (`id ("add_record_service"), `Value, current_service);
		UI::ChangeWidget (`id ("add_record_protocol"), `Value, current_protocol);

		if (regexpmatch (current_val, "^[0-9]+[ \\t]+[0-9]+[ \\t]+[0-9]+.*")) {
		    current_prio	= tointeger (regexpsub (current_val, "^([0-9]+)[ \\t]+[0-9]+[ \\t]+[0-9]+.*$", "\\1"));
		    current_weight	= tointeger (regexpsub (current_val, "^[0-9]+[ \\t]+([0-9]+)[ \\t]+[0-9]+.*$", "\\1"));
		    current_port	= tointeger (regexpsub (current_val, "^[0-9]+[ \\t]+[0-9]+[ \\t]+([0-9]+).*$", "\\1"));
		    current_val		= regexpsub (current_val, "^[0-9]+[ \\t]+[0-9]+[ \\t]+[0-9]+[ \\t]+(.*)$", "\\1");
		} else if (current_val != "" && regexpmatch (current_val, "[ \\t]")) {
		    y2error ("Invalid record val: %1", current_val);
		}

		UI::ChangeWidget (`id ("add_record_prio"), `Value, current_prio);
		UI::ChangeWidget (`id ("add_record_weight"), `Value, current_weight);
		UI::ChangeWidget (`id ("add_record_port"), `Value, current_port);

		break;

	    // "MX"
	    case "MX":
		if (regexpmatch (current_val, "[0-9]+[ \\t]+.*")) {
		    current_prio	= tointeger (regexpsub (current_val, "([0-9]+)[ \\t]+.*", "\\1"));
		    current_val		= regexpsub (current_val, "[0-9]+[ \\t]+(.*)", "\\1");
		} else if (current_val != "" && regexpmatch (current_val, "[ \\t]")) {
		    y2error ("Invalid record val: %1", current_val);
		}

		UI::ChangeWidget (`id ("add_record_prio"), `Value, current_prio);

		break;

	    // "A", "AAAA", "CNAME", "NS", "PTR", "TXT", "SPF"
	    default:
		break;
	};

	// Applies to all
	UI::ChangeWidget (`id ("add_record_name"), `Value,
	    DnsServerHelperFunctions::RRToRelativeName(
		Punycode::DecodeDomainName (current_key), decoded_zone_name, current_type, "key"
	    )
	);
	UI::ChangeWidget (`id ("add_record_type"), `Value, current_type);
	UI::ChangeWidget (`id ("add_record_val"), `Value,
	    DnsServerHelperFunctions::RRToRelativeName(
		Punycode::DecodeDomainName (current_val), decoded_zone_name, current_type, "value"
	    )
	);
}

void SwitchAndAdjustEditationWidgets (string & type, map current_record, string & decoded_zone, string & zone);

void RedrawZonesTable () {
    integer index = -1;
    string zone_name = current_zone["zone"]:"";
    string decoded_zone_name = Punycode::DecodeDomainName(zone_name);

    list<integer> ret = maplist (map m, current_zone["records"]:[], {
	index = index + 1;
	if (m["type"]:"" == "TTL" || m["type"]:"" == "ORIGIN")
            return -1;
	if ((m["type"]:"" == "NS" || m["type"]:"" == "MX")
	    && (m["key"]:"" == sformat ("%1.", zone_name)
		|| m["key"]:"" == "@"))
	{
	    return -1;
        }
	if (m["type"]:"" == "comment")
	{
	    return -1;
	}
        return index;
    });
    ret = filter (integer r, ret, ``(r != nil && r != -1));

    // keys
    list <string> decoded_names = maplist (integer r, ret, {
	return current_zone["records", r, "key"]:"";
    });

    integer const_plus = size(decoded_names);

    // values
    foreach (string record, maplist (integer r, ret, {
	    return current_zone["records", r, "value"]:"";
    }), {
	decoded_names = add (decoded_names, record);
    });
    decoded_names = Punycode::DecodePunycodes(decoded_names);

    integer counter = -1;
    list items = maplist (integer r, ret, {
	counter = counter + 1;

	string record_type = current_zone["records", r, "type"]:"";

	return `item (
	    `id (r),
	    DnsServerHelperFunctions::RRToRelativeName (
		decoded_names[counter]:current_zone["records", r, "key"]:"", decoded_zone_name, record_type, "key"
	    ),
	    record_type,
	    DnsServerHelperFunctions::RRToRelativeName (
		decoded_names[counter+const_plus]:current_zone["records", r, "value"]:"", decoded_zone_name, record_type, "value"
	    )
	);
    });

    // remember the last selected item
    integer r = (integer)
	UI::QueryWidget (`id ("records_list"), `CurrentItem);
    if (r == nil) r = items [0, 0, 0]:0;

    // Redraw
    UI::ChangeWidget (`id ("records_list"), `Items, items);

    // Set CurrentItem again
    if (size (items) > 0) {
	UI::ChangeWidget (`id ("records_list"), `CurrentItem, r);
    }

    UI::ChangeWidget (`id ("delete_record"), `Enabled, size (items) > 0);
    UI::ChangeWidget (`id ("change_record"), `Enabled, size (items) > 0);

    if (size (items) > 0)
    {
	r = (integer) UI::QueryWidget (`id ("records_list"), `CurrentItem);

	map current_record = current_zone["records", r]:$[];
	string current_type = current_record["type"]:"A";

	SwitchAndAdjustEditationWidgets (current_type, current_record, decoded_zone_name, zone_name);
    }
}

///**
// * Setting ValidChars for dialog
// */
// void ValidCharsZoneRecordsTab () {
//    UI::ChangeWidget( `id ("add_record_name"),	`ValidChars,	Hostname::ValidCharsFQ);
//    UI::ChangeWidget( `id ("add_record_val"),	`ValidChars,	Hostname::ValidCharsFQ + " ");
//}

/**
 * Initialize the tab of the dialog
 */
void InitZoneRecordsTab () {
    RedrawZonesTable ();
}

/**
 * Store settings of a tab of a dialog
 */
void StoreZoneRecordsTab () {
    return;
}

/**
 * Checks whether a given string is a valid TXT record key (name)
 */
boolean ValidTextRecordName (string name) {
    // Checking the length
    if (name == nil || name == "") {
	y2warning ("TXT record key must not be empty");
	return false;
    }

    // Checking for forbidden '='
    if (regexpmatch(name, "=")) {
	y2warning ("TXT record key %1 must not contain a '=' character.", name);
	return false;
    }

    // only US-ASCII characters are allowed
    if (size(name) != size(toascii(name))) {
	y2warning ("TXT record key %1 contains some non US-ASCII characters", name);
	return false;
    }

    return true;
}

/**
 * Checking new record by the "type"
 */
boolean CheckNewZoneRecordSyntax (map <string, string> record) {
    // $[ "key" : key, "type" : type, "val" : val ]

    string type	= (string) record["type"]:"";
    string key	= (string) record["key"]:"";
    string val	= (string) record["val"]:"";
    
    if (regexpmatch (key, "^.*\\.$"))
	key = regexpsub (key, "^(.*)\\.$", "\\1");
    if (regexpmatch (val, "^.*\\.$"))
	val = regexpsub (val, "^(.*)\\.$", "\\1");

    // -- A -- \\
    if (type == "A") {
	// (hostname or FQ -> IPv4)
	// BNC #646895: Wildcard '*' not supported as valid hostname
	if (Hostname::Check(key) != true && Hostname::CheckFQ(key) != true && key != "*") {
	    UI::SetFocus ( `id ("add_record_name") );
	    Popup::Error ( Hostname::ValidFQ() );
	    return false;
	}
	if (IP::Check4(val) != true) {
	    UI::SetFocus ( `id ("add_record_val") );
	    Popup::Error ( IP::Valid4() );
	    return false;
	}
	return true;

    // -- CNAME -- \\
    } else if (type == "CNAME") {
	// (hostname or FQ -> hostname or FQ)
	if (Hostname::Check(key) != true && Hostname::CheckFQ(key) != true && key != "*") {
	    UI::SetFocus ( `id ("add_record_name") );
	    Popup::Error ( Hostname::ValidFQ() );
	    return false;
	}
	if (Hostname::Check(val) != true && Hostname::CheckFQ(val) != true) {
	    UI::SetFocus ( `id ("add_record_val") );
	    Popup::Error ( Hostname::ValidFQ() );
	    return false;
	}
	return true;

    // -- NS -- \\
    } else if (type == "NS") {
	// (hostname or domain or FQ -> hostname or FQ)
	if (Hostname::Check(key) != true &&
	    Hostname::CheckDomain(key) != true &&
	    Hostname::CheckFQ(key) != true &&
	    key != "*"
	) {
	    UI::SetFocus ( `id ("add_record_name") );
	    Popup::Error ( Hostname::ValidFQ() );
	    return false;
	}
	if (Hostname::Check(val) != true && Hostname::CheckFQ(val) != true) {
	    UI::SetFocus ( `id ("add_record_val") );
	    Popup::Error ( Hostname::ValidFQ() );
	    return false;
	}
	return true;

    // -- MX -- \\
    } else if (type == "MX") {
	if (regexpmatch (val, "^[ \t]*[0-9]+[ \t]+[^ \t].*$")) {
	    val = regexpsub (val, "^[ \t]*[0-9]+[ \t]+([^ \t].*)$", "\\1");
	    // FIXME: check also priority
	}
	// (hostname or domain or FQ -> hostname or FQ)
	if (Hostname::Check(key) != true &&
	    Hostname::CheckDomain(key) != true &&
	    Hostname::CheckFQ(key) != true &&
	    key != "*"
	) {
	    UI::SetFocus ( `id ("add_record_name") );
	    Popup::Error ( Hostname::ValidFQ() );
	    return false;
	}
	if (Hostname::Check(val) != true && Hostname::CheckFQ(val) != true) {
	    UI::SetFocus ( `id ("add_record_val") );
	    Popup::Error ( Hostname::ValidFQ() );
	    return false;
	}
	return true;

    // -- PTR -- \\
    } else if (type == "PTR") {
	val = record["val"]:"";

	// (hostname or domain or FQ)
	if (Hostname::CheckFQ (val) != true || ! regexpmatch (val, "\\.*$"))
	{
	    UI::SetFocus (`id ("add_record_val"));
	    Popup::Error (Hostname::ValidFQ());
	    return false;
	}

	string zone_name = current_zone["zone"]:"" + ".";

	// IPv6 reverse zone
	if (regexpmatch (zone_name, ".*\\.ip6\\.arpa\\.?$")) {
	    key = record["key"]:"";

	    // relative reverse IPv6
	    if (! regexpmatch (key, "\\.[ \\t]*$"))
		key = key + "." + zone_name;
	    if (! regexpmatch (key, "^[ \\t]*([0-9a-fA-F]\\.){32}ip6\\.arpa\\.[ \\t]*$")) {
		y2error ("Wrong reverse IPv6: '%1'", key);
		UI::SetFocus (`id ("add_record_name"));
		// Pop-up error message, %1 is replaced with an example
		Popup::Error (sformat(_("Invalid IPv6 reverse IP.

IPv6 reverse records are supported either in the full form (%1)
or in the relative form to the current zone."), "*.ip6.arpa."));
		return false;
	    }
	// IPv4 reverse zone
	} else {
	    string num = "(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])";
	    string ipv4_incompl = "^" + num + "(\\." + num + "){0,3}" + "(\\.in-addr\\.arpa)*\\.*$";
	    if (! regexpmatch (key, ipv4_incompl))
	    {
		UI::SetFocus ( `id ("add_record_name") );
		Popup::Error ( Hostname::ValidFQ() );
		return false;
	    }
	}

	return true;

    // -- AAAA -- \\
    } else if (type == "AAAA") {
	// (hostname or FQ)
	if (Hostname::Check(key) != true && Hostname::CheckFQ(key) != true && key != "*") {
	    UI::SetFocus ( `id ("add_record_name") );
	    Popup::Error ( Hostname::ValidFQ() );
	    return false;
	}
	if (IP::Check6(val) != true) {
	    UI::SetFocus ( `id ("add_record_val") );
	    Popup::Error (_("Invalid IPv6 address."));
	    return false;
	}
	return true;

    // -- SRV -- \\
    } else if (type == "SRV") {
	// int int int hostname
	if (regexpmatch (val, "^[ \t]*[0-9]+[ \t]+[0-9]+[ \t]+[0-9]+[ \t]+[^ \t].*$")) {
	    val = regexpsub (val, "^[ \t]*[0-9]+[ \t]+[0-9]+[ \t]+[0-9]+[ \t]+([^ \t].*)$", "\\1");
	    // FIXME: check also other values (ints)
	}
	if (Hostname::Check(val) != true && Hostname::CheckFQ(val) != true) {
	    UI::SetFocus ( `id ("add_record_val") );
	    Popup::Error ( Hostname::ValidFQ() );
	    return false;
	}
	return true;

    // -- TXT or SPF -- \\
    } else if (type == "TXT" || type == "SPF") {
	if (! ValidTextRecordName(key)) {
	    UI::SetFocus ( `id ("add_record_name") );
	    // Error pop-up message, %1 is replaced with TXT or SPF
	    Popup::Error (sformat(_("Invalid %1 record key. It should consist of printable US-ASCII characters excluding '='
and must be at least one character long."), type));
	    return false;
	}
	if (size (val) > max_text_record_length) {
	    UI::SetFocus (`id ("add_record_val"));
	    // TRANSLATORS: Error message, %1 is replaced with either TXT or SPF,
	    // %2 with the maximal length,
	    // %3 with the current length of a new record
	    Popup::Error (sformat(_("Maximal %1 record length is %2 characters.
This one is %3 characters long."), type, max_text_record_length, size (val)));
	    return false;
	}
	return true;
    }

    y2error ("unknown record type: %1", record["type"]:"");
    return false;
}

/**
 * Checking new record by the "type"
 */
boolean CheckNewZoneRecordLogic (map <string, string> record) {
    // $[ "key" : key, "type" : type, "val" : val ]

    string type	= (string) record["type"]:"";
    string key	= (string) record["key"]:"";
    string val	= (string) record["val"]:"";

    if (type == "A") {
	// A record should point to IPv4 address
	return true;
    } else if (type == "AAAA") {
	// AAAA record should point to IPv6 address
	return true;
    } else if (type == "CNAME") {
	// (hostname or FQ -> hostname or FQ)
	if (key == val) {
	    UI::SetFocus ( `id ("add_record_val") );
	    // TRANSLATORS: a popup message, CNAME (link) points to itself
	    Popup::Error ( _("CNAME cannot point to itself.") );
	    return false;
	}
	return true;
    } else if (type == "NS") {
	// FIXME: NS should point to an A or AAAA record (if it is in the same domain)
	return true;
    } else if (type == "MX") {
	// FIXME: MX should point to an A or AAAA record (if it is in the same domain)
	return true;
    } else if (type == "PTR") {
	return true;
    } else if (type == "SRV") {
	// FIXME: SRV should point to an A or AAAA record (if it is in the same domain)
	return true;
    } else if (type == "TXT" || type == "SPF") {
	return true;
    }

    y2error ("unknown record type: %1", record["type"]:"");
    return false;
}

// Transform a given key/value by adding the ending dot if
// it ends with the current zone name
string TransformRecord (string record) {
    string zone_regexp = mergestring (
	splitstring (current_zone["zone"]:"", "."),
	"\\."
    );

    // key terminated with zone name without dot
    if (regexpmatch (record, ".*\\." + zone_regexp + "$"))
	record = record + ".";

    return record;
}

boolean CheckAndModifyRecord (string & type, string & key, string & val) {
	// (SYNTAX) Checking the record by record-type (true or false)
	if (CheckNewZoneRecordSyntax ($[ "key" : key, "type" : type, "val" : val ]) != true) {
	    return false;
	}
	// (LOGIC) Checking the record by record-type (true or false)
	if (CheckNewZoneRecordLogic ($[ "key" : key, "type" : type, "val" : val ]) != true) {
	    return false;
	}

	string tolower_type = tolower (type);

	if (tolower_type == nil || tolower_type == "") {
	    y2error ("tolover(%1) -> %2", type, tolower_type);
	    return false;
	}

	if (tolower_type == "ptr")
	{
	    // no dot at the end
	    if (! regexpmatch (val, "^.*\\.$"))
		// add dot
		val = val + ".";

	    if (regexpmatch (key, "in-addr\\.arpa$") || regexpmatch (key, "ip6\\.arpa$"))
		key = key + ".";
	}

	else if (contains (["a", "cname", "ns", "mx"], tolower_type))
	{
	    if (tolower_type == "mx") {
		if (! regexpmatch (val, "^[ \t]*[0-9]+[ \t]+[^ \t].*$")) {
		    val = "0 " + val;
		} else {
		    integer prio = tointeger( regexpsub (val, "^[ \t]*([0-9]+)[ \t]+[^ \t].*$", "\\1") );
		    if (prio > 65535) {
			val = "65535 " + regexpsub (val, "^[ \t]*[0-9]+[ \t]+([^ \t].*)$", "\\1");
			y2milestone("MX Priority decrased to maximal 65535 from %1", prio);
		    }
		}
	    }

	    if (tolower_type == "cname") {
		key = TransformRecord (key);
		val = TransformRecord (val);
	    } else if (contains (["ns", "mx"], tolower_type)) {
		val = TransformRecord (val);
	    } else if (tolower_type == "a") {
		key = TransformRecord (key);
	    }
	}

    return true;
}

void SwitchAndAdjustEditationWidgets (string & type, map current_record, string & decoded_zone, string & zone) {
    term new_rr_rp = GetEditationWidgets (type);

    string key = (string) UI::QueryWidget (`id ("add_record_name"), `Value);
    string val = (string) UI::QueryWidget (`id ("add_record_val"), `Value);

    if (! haskey (current_record, "key")) current_record["key"] = key;
    if (! haskey (current_record, "value")) current_record["value"] = val;

    // Replacing the editation widgets
    if (new_rr_rp != current_rr_rp) {
	current_rr_rp = new_rr_rp;
	UI::ReplaceWidget (`id ("rr_rp"), current_rr_rp);
	last_add_record_type = type;
	UI::ChangeWidget (`id ("add_record_type"), `Value, type);
	UI::SetFocus (`id ("add_record_type"));
    }

    AdjustEditationWidgets (current_record, decoded_zone, zone);
}

/**
 * Handle events in a tab of a dialog
 */
symbol HandleZoneRecordsTab (map event) {
    any ret = event["ID"]:nil;
    string zone_fqdn = current_zone["zone"]:"" + ".";

    integer r = (integer)  UI::QueryWidget (`id ("records_list"), `CurrentItem);
    // Currently selected type
    string type = (string) UI::QueryWidget (`id ("add_record_type"), `Value);

    // translating new record key
    string key = (string) UI::QueryWidget (`id ("add_record_name"), `Value);
    if (key == "@") {
	key = zone_fqdn;
	y2warning ("Transforming key @ into %1", key);
    }
    key = Punycode::EncodeDomainName (key);

    // translating new record val
    string val = Punycode::EncodeDomainName(
	(string) UI::QueryWidget (`id ("add_record_val"), `Value)
    );

    string record_service = "";
    string record_protocol = "";

    integer record_prio = 0;
    integer record_weigh = 0;
    integer record_port = 0;

    string zone = current_zone["zone"]:"";
    string decoded_zone = Punycode::DecodeDomainName(zone);

    // Switch to new type of Editation dialog
    if (ret == "add_record_type") {
	if (type != last_add_record_type)
	    SwitchAndAdjustEditationWidgets (type, $["type":type], decoded_zone, zone);
	return nil;
    }

    switch (type) {
	// "SRV"
	case "SRV":
	    record_service	= (string) UI::QueryWidget (`id ("add_record_service"), `Value);
	    record_protocol	= (string) UI::QueryWidget (`id ("add_record_protocol"), `Value);

	    // empty key or FQDN
	    if (key == "" || key == zone_fqdn) {
		key = sformat ("%1.%2", record_service, record_protocol);
	    // non empty key & not matching zone FQDN
	    } else {
		key = sformat ("%1.%2.%3", record_service, record_protocol, key);
	    }

	    record_prio		= (integer) UI::QueryWidget (`id ("add_record_prio"), `Value);
	    record_weigh	= (integer) UI::QueryWidget (`id ("add_record_weight"), `Value);
	    record_port		= (integer) UI::QueryWidget (`id ("add_record_port"), `Value);

	    val = sformat ("%1 %2 %3 %4", record_prio, record_weigh, record_port, val);

	    break;

	// "MX"
	case "MX":
	    record_prio	= (integer) UI::QueryWidget (`id ("add_record_prio"), `Value);

	    val = sformat ("%1 %2", record_prio, val);

	    break;

	// "A", "AAAA", "CNAME", "NS", "PTR", "TXT", "SPF"
	default:
	    break;
    };

    // Switching selected record
    if (ret == "records_list")
    {
	// type might have changed
	type = current_zone["records", r, "type"]:"";
	SwitchAndAdjustEditationWidgets (type, current_zone["records", r]:$[], decoded_zone, zone);
    }

    // Changing selected record
    else if (ret == "change_record")
    {
	if (CheckAndModifyRecord (type, key, val) != true) {
	    return nil;
	}

	DnsServerHelperFunctions::HandleNsupdate (current_zone["records", r]:$[], "delete", current_zone);

	current_zone["records", r, "key"]	= key;
	current_zone["records", r, "type"]	= type;
	current_zone["records", r, "value"]	= val;
	RedrawZonesTable ();

	DnsServerHelperFunctions::HandleNsupdate (current_zone["records", r]:$[], "add", current_zone);
    }

    // Adding new record
    else if (ret == "add_record")
    {
	if (CheckAndModifyRecord (type, key, val) != true) {
	    return nil;
	}

	map rec = $[
	    "key" : key,
	    "type" : type,
	    "value" : val,
	];
	current_zone["records"] = add (current_zone["records"]:[], rec);
	RedrawZonesTable ();

	DnsServerHelperFunctions::HandleNsupdate (rec, "add", current_zone);
    }

    // Removing selected record
    else if (ret == "delete_record")
    {
	if (! Confirm::DeleteSelected()) {
	    return nil;
	}

	DnsServerHelperFunctions::HandleNsupdate (current_zone["records", r]:$[], "delete", current_zone);

	current_zone["records", r] = nil;
	current_zone["records"] = filter (any r, current_zone["records"]:[], ``(
	    r != nil
	));
	RedrawZonesTable ();

    // And the rest...
    } else {
	y2error ("Uknown ret: %1", ret);
    }

    return nil;
}
/**
 * Dialog Zone Editor - Tab
 * @param string tab_id
 * @return term dialog for ZoneEditorDialog()
 */
term GetMasterZoneEditorTab (string tab_id) {
    if		( tab_id == "basics" )		return GetMasterZoneEditorTabBasics();
    else if	( tab_id == "name_servers" )	return GetMasterZoneEditorTabNameServers();
    else if	( tab_id == "mail_servers" )	return GetMasterZoneEditorTabMailServers();
    else if	( tab_id == "soa_settings" )	return GetMasterZoneEditorTabSOASettings();
    else if	( tab_id == "records" )		return GetMasterZoneEditorTabRecords();

						// This should never happen, but ...
						y2error ( "unknown tab_id: %1", tab_id );
						// When no dialog defined for this tab (software error)
						return `Label ( _("An internal error has occurred.") );
}

void InitMasterZoneTab (string dialog) {
    if (dialog == "basics")
    {
	InitZoneBasicsTab ();
    }
    else if (dialog == "name_servers")
    {
	InitNsListTab ();
    }
    else if (dialog == "mail_servers")
    {
	InitMxListTab ();
    }
    else if (dialog == "soa_settings")
    {
	InitSoaTab ();
    }
    else if (dialog == "records")
    {
	InitZoneRecordsTab ();
    }
}

void StoreMasterZoneTab (string dialog) {
    if (dialog == "basics")
    {
	StoreZoneBasicsTab ();
    }
    else if (dialog == "name_servers")
    {
	StoreNsListTab ();
    }
    else if (dialog == "mail_servers")
    {
	StoreMxListTab ();
    }
    else if (dialog == "soa_settings")
    {
	StoreSoaTab ();
    }
    else if (dialog == "records")
    {
	StoreZoneRecordsTab ();
    }
}

symbol HandleMasterZoneTab (string dialog, map event) {
    symbol ret = nil;
    if (dialog == "basics")
    {
	HandleZoneBasicsTab (event);
    }
    else if (dialog == "name_servers")
    {
	ret = HandleNsListTab (event);
    }
    else if (dialog == "mail_servers")
    {
	ret = HandleMxListTab (event);
    }
    else if (dialog == "soa_settings")
    {
	ret = HandleSoaTab (event);
    }
    else if (dialog == "records")
    {
	HandleZoneRecordsTab (event);
    }
    return ret;
}

boolean ValidateMasterZoneTab (string dialog, map event) {
    boolean ret = true;
    if (dialog == "basics")
    {
	ret = true;
    }
    else if (dialog == "name_servers")
    {
	ret = true;
    }
    else if (dialog == "mail_servers")
    {
	ret = true;
    }
    else if (dialog == "soa_settings")
    {
	ret = ValidateSoaTab (event);
    }
    else if (dialog == "records")
    {
	ret = true;
    }
    return ret;
}
/**
 * Dialog Zone Editor - Main
 * @return any dialog result for wizard
 */
symbol runMasterZoneTabDialog () {

    // Dialog Caption - Expert Settings - Zone Editor
    string caption = _("Zone Editor");

    // Helps ale linked like this Tab_ID -> HELPS[ Help_ID ]
    map <string, string> help_identificators = $[
	"basics"		: "zone_editor_basics",
	"name_servers"		: "zone_editor_nameservers",
	"mail_servers"		: "zone_editor_mailservers",
	"soa_settings"		: "zone_editor_soa",
	"records"		: "zone_editor_records",
    ];

    string zone_name = current_zone["zone"]:"";
    string zone_name_dec = Punycode::DecodeDomainName (zone_name);
    string current_tab = "basics";

    list <term> tab_terms = [];

    // Different list of tabs for reverse zone
    if (DnsServerHelperFunctions::IsReverseZone (zone_name)) {
	tab_terms = [
								// Menu Item - Zone Editor - Tab
			`item ( `id( "basics" ),		_("&Basics") ),
								// Menu Item - Zone Editor - Tab
			`item ( `id( "name_servers" ),		_("NS Recor&ds") ),
								// Menu Item - Zone Editor - Tab
			`item ( `id( "soa_settings" ),		_("&SOA") ),
								// Menu Item - Zone Editor - Tab
			`item ( `id( "records" ),		_("R&ecords") ),
		    ];
    // Not a reverse zone
    } else {
	tab_terms = [
								// Menu Item - Zone Editor - Tab
			`item ( `id( "basics" ),		_("&Basics") ),
								// Menu Item - Zone Editor - Tab
			`item ( `id( "name_servers" ),		_("NS Recor&ds") ),
								// Menu Item - Zone Editor - Tab
			`item ( `id( "mail_servers" ),		_("M&X Records") ),
								// Menu Item - Zone Editor - Tab
			`item ( `id( "soa_settings" ),		_("&SOA") ),
								// Menu Item - Zone Editor - Tab
			`item ( `id( "records" ),		_("R&ecords") ),
		    ];
    }



    term contents =
	//`Top (
	    `VBox( `opt ( `hvstretch ),
		`HBox (
		    // Label - connected with Textentry which shows current edited zone
		    `HSquash (`Label ( _("Settings for Zone"))),
		    `HSquash (`MinWidth (size (zone_name_dec) + 3,
			`InputField (`id ("current_zone"), `opt (`disabled, `hstretch), "", zone_name_dec)
		    )),
		    `HStretch()
		),
		`VSpacing ( 1 ),
		// Here start Tabs
		// FIXME: after `Tab implementation
		UI::HasSpecialWidget(`DumbTab ) ?
		(
		    `DumbTab (`id (`dumbtab), tab_terms,
			`ReplacePoint( `id( `tabContents ), GetMasterZoneEditorTab ( current_tab ) )
		    )
		)
		:
		(
		DnsFakeTabs::DumbTabs( tab_terms ,
		    `ReplacePoint( `id( `tabContents ), GetMasterZoneEditorTab ( current_tab ) )
		))
	    );
	//);
// Menu Item - Zone Editor - Tab
string qwerty = _("Ad&vanced");
// error report
//qwerty = _("The input value is invalid.");
// error report
//qwerty = _("At least one name server must be defined.");

    // FIXME: Only one help is used for all tabs. Maybe would be better to change the help for every single tab.
    Wizard::SetContentsButtons ( caption, contents, HELPS[ help_identificators[current_tab]:"" ]:"",
	Label::BackButton (), Label::OKButton () );
    Wizard::DisableBackButton();
    Wizard::SetAbortButton (`go_back, Label::CancelButton());
    InitMasterZoneTab ( current_tab );

    map event = nil;
    any ret = nil;
    while(true) {

	event = UI::WaitForEvent();
	ret = event["ID"]:nil;

        if (ret == `next ) {
	    // The new ones are alerady stored there
	    if (current_tab != "name_servers") {
		// BNC #436456
		if (current_tab == "basics") StoreZoneBasicsTab();

		RegenerateCurrentZoneNS();
	    }

	    // at least one NS server must be set
	    if (size (current_zone_ns) == 0) {
		y2warning ("At least one NS server must be set");
		current_tab = "name_servers";
		UI::ReplaceWidget (`tabContents, GetMasterZoneEditorTab ("name_servers"));
		if (UI::HasSpecialWidget (`DumbTab))
		    UI::ChangeWidget (`id (`dumbtab), `CurrentItem, current_tab);
		Report::Error (_("At least one NS server must be set."));
		continue;
	    }

	    if (ValidateMasterZoneTab (current_tab, event))
		break;
	    else
		continue;
	}
	if (ret == `go_back)
	{
	    ret = `back;
	    break;
	}
	// close the whole dialog
	else if ( ret == `cancel) {
	    if ( ReallyAbort() )
		return `abort;
	    else
		continue;
        }
	// TAB fake
	else if	( ret == "basics" || ret == "name_servers" || ret == "mail_servers" || ret == "soa_settings" || ret == "records" ) {
	  if (ValidateMasterZoneTab (current_tab, event))
	  {
	    StoreMasterZoneTab (current_tab);
	    current_tab = (string)ret;

	    string show_warning = "";

	    list <string> autogenerated_reverse_zone_allows = ["basics", "soa_settings", "name_servers"];

	    // Fake current tab if selected tab not allowed
	    if (
		// connected_with i set
		current_zone["connected_with"]:"" != "" && current_zone["connected_with"]:nil != nil &&
		// switching to forbidden tab
		! contains (autogenerated_reverse_zone_allows, tostring (ret))
	    ) {
		current_tab = "basics";
		if (UI::HasSpecialWidget (`DumbTab))
		    UI::ChangeWidget (`id (`dumbtab), `CurrentItem, current_tab );
		y2warning ("connected_with has been set, setting '%1' is not allowed", ret);
		// warning message, %1 is replaced with a zone name
		//
		// Automatically Generate Records From is a feature that makes YaST to generate
		// DNS records manually from selected zone
		show_warning = sformat (_("Current zone records are automatically generated from %1 zone.
To change records manually disable the Automatically Generate Records From feature."), current_zone["connected_with"]:"");
	    }

	    // Switch contents
	    UI::ReplaceWidget( `tabContents, GetMasterZoneEditorTab (current_tab) );

	    if (current_tab == "records")
	    {
		string help_part2 = "zone_editor_records_forward";
		if (DnsServerHelperFunctions::IsReverseZone (current_zone["zone"]:""))
		    help_part2 = "zone_editor_records_reverse";

		Wizard::RestoreHelp (
		    HELPS[help_identificators[current_tab]:""]:""
		    + HELPS[help_part2]:""
		);
	    }
	    else
	    {
		Wizard::RestoreHelp ( HELPS[
		    help_identificators[current_tab]:""
		]:"");
	    }

	    // Initialize values
	    InitMasterZoneTab ( current_tab );

	    // Show warning if anything to show
	    if (show_warning != "")
		Report::Warning (show_warning);
	  }
	  else
	  {
	    // ensure the same tab selected
	    if ( UI::HasSpecialWidget (`DumbTab) )
	    {
		UI::ChangeWidget (`id (`dumbtab), `CurrentItem, current_tab );
	    }
	  }
	}
	else
	{
	    ret = HandleMasterZoneTab (current_tab, event);
	    if (ret != nil)
		break;
	}
    }

    if (ret == `next)
    {
	StoreMasterZoneTab (current_tab);
	current_zone["modified"] = true;
	DnsServer::StoreCurrentZone (current_zone);
	DnsServer::StoreZone ();
	DnsServer::SetModified ();
    }

    was_editing_zone = true;
    return (symbol)ret;
}

/**
 * Dialog Zone Editor - Slave
 * @return any dialog result for wizard
 */
symbol runSlaveZoneTabDialog () {
    list<string> acl = maplist (string acl_record, DnsServer::GetAcl(), {
	list<string> acl_splitted = splitstring (acl_record, " \t");
	return acl_splitted[0]:"";
    });
    acl = (list<string>)
	sort (merge (acl, ["any", "none", "localhost", "localnets"]));

    // bug #203910
    // hide "none" from listed ACLs
    // "none" means, not allowed and thus multiselectbox of ACLs is disabled
    acl = filter (string one_acl, acl, {
	return one_acl != "none";
    });

    string zone_name = current_zone["zone"]:"";
    term contents = `VBox (
	`HBox (
	    // Label - connected with Textentry which shows current edited zone
	    `HSquash ( `Label ( _("Settings for Zone") ) ),
	    `HSquash ( `InputField ( `id ( "current_zone" ), `opt ( `disabled, `hstretch ), "",
		Punycode::DecodeDomainName(zone_name)
	    ) ),
	    `HStretch ()
	),
	`VSpacing ( 1 ),
	// TRANSLATORS: Text entry
	`Left (`InputField (`id ("master"), `opt (`hstretch), _("&Master DNS Server IP"))),
	`VSpacing (2),
	`Left (`CheckBox (`id ("enable_zone_transport"), `opt (`notify),
	    // check box
	    _("Enable &Zone Transport"))),
	// multi selection box
	`VSquash(`MultiSelectionBox (`id ("acls_list"), _("ACLs"), acl)),
	`VStretch ()
    );

    // dialog caption
    string caption = _("Zone Editor");

    Wizard::SetContentsButtons (caption, contents, HELPS["slave_zone"]:"",
        Label::CancelButton (), Label::OKButton () );

    map event = $[];
    any ret = nil;
    ZoneAclInit ();
    string zm = current_zone["masters"]:"";
    integer i = findfirstof (zm, "{");
    if (i != nil)
        zm = substring (zm, i + 1);
    i = findfirstof (zm, "}");
    if (i != nil)
        zm = substring (zm, 0, i);
    current_zone_masters = splitstring (zm, ";");
    current_zone_masters = maplist (string m, current_zone_masters, ``(
        mergestring (splitstring (m, " "), "")
    ));
    current_zone_masters = filter (string m, current_zone_masters, ``(
        m != ""));
    UI::ChangeWidget (`id ("master"), `Value, current_zone_masters[0]:"");
    UI::ChangeWidget (`id ("master"), `ValidChars, "0123456789.");
    while (true)
    {
	event = UI::WaitForEvent ();
	ret = event["ID"]:nil;
	ZoneAclHandle (event);
	if (ret == `abort)
	{
	    if ( ReallyAbort() )
		return `abort;
	    else
		continue;
	}
	if (ret == `back)
	{
	    // fixing bug #45950, slave zone _MUST_ have master server
	    if (size(current_zone_masters)==0) {
		if (Popup::ContinueCancelHeadline(
		    // TRANSLATORS: Popup error headline
		    _("Missing Master Server"),
		    // TRANSLATORS: Popup error text
		    _("Every slave zone must have its master server IP defined.
Configuration of a DNS server without a master server would fail.
If you continue, the current zone will be removed.")
		)) {
		    // removing current zone - zone needs master server
		    zones = filter (map z, zones, ``(z != current_zone));
		    DnsServer::StoreZones (zones);
		    break;
		} else {
		    continue;
		}
	    }

	    break;
	}
	if( ret == `next)
	{
	    if (false)
	    {
		// TRANSLATORS: A popup error message
		Report::Error (_("No master DNS server defined."));
		continue;
	    }
	    else
	    {
		// controlling sever name, IP
		string master_server =
		    (string)UI::QueryWidget (`id ("master"), `Value);
		// Master server must be only IP
		if (IP::Check4(master_server) != true)
		{
		    UI::SetFocus ( `id ("master") );
		    // A popup error message
		    Popup::Error ( _("The specified master name server is not a valid IP address.") );
		    continue;
		}
		break;
	    }
	}
    }
    if (ret == `next)
    {
	current_zone["masters"] = sformat ("{ %1; }",
	    (string)UI::QueryWidget (`id ("master"), `Value));
	ZoneAclStore ();
	current_zone["modified"] = true;
	DnsServer::StoreCurrentZone (current_zone);
	DnsServer::StoreZone ();
	DnsServer::SetModified ();
    }
    was_editing_zone = true;
    return (symbol) ret;
}

/**
 * Dialog Zone Editor - Stub
 * @return any dialog result for wizard
 */
symbol runStubZoneTabDialog () {
    was_editing_zone = true;
    return runSlaveZoneTabDialog ();
}

/* All current forwarders are stored here */
list <string> current_zone_forwarders = [];

void InitTableOfZOneForwarders () {
    if (current_zone_forwarders != nil && current_zone_forwarders != []) {
	list <term> forwarders_items = [];
	foreach (string one_forwarder, current_zone_forwarders, {
	    forwarders_items = add(forwarders_items, `item(`id(one_forwarder), one_forwarder));
	});
	UI::ChangeWidget (`id("zone_forwarders_list"), `Items, forwarders_items);
    }
}

void ForwardZone_AddZoneForwarder () {
    string new_forwarder = (string) UI::QueryWidget(`id("new_forwarder"), `Value);
    if (!IP::Check4(new_forwarder)) {
	UI::SetFocus(`id("new_forwarder"));
	Report::Error(IP::Valid4());
    } else {
	current_zone_forwarders = toset(add(current_zone_forwarders, new_forwarder));
	InitTableOfZOneForwarders();
    }
}

void ForwardZone_DeleteZoneForwarder () {
    string delete_forwarder = (string) UI::QueryWidget(`id("zone_forwarders_list"), `CurrentItem);
    if (delete_forwarder != nil && delete_forwarder != "") {
	current_zone_forwarders = filter (string one_forwarder, current_zone_forwarders, {
	    return one_forwarder != delete_forwarder;
	});
	InitTableOfZOneForwarders();
    }
}

/**
 * Dialog Zone Editor - Forward
 * @return any dialog result for wizard
 */
symbol runForwardZoneTabDialog () {

    string zone_name = current_zone["zone"]:"";
    current_zone_forwarders = DnsServerAPI::GetZoneForwarders(current_zone["zone"]:"");

    term contents =
	`VBox (
	`HBox (
	    // Label - connected with Textentry which shows current edited zone
	    `HSquash ( `Label ( _("Settings for Zone") ) ),
	    `HSquash ( `InputField ( `id ( "current_zone" ), `opt ( `disabled, `hstretch ), "",
		Punycode::DecodeDomainName(zone_name)
	    ) ),
	    `HStretch ()
	),
	`VSpacing ( 1 ),
	    `VSquash (
		`HBox (
		    `HWeight (7,
			// Textentry - adding forwarder
			`InputField ( `id("new_forwarder"), `opt (`hstretch), _("New &Forwarder IP Address"))
		    ),
		    `HWeight (2,
			`VBox (
			    `VStretch (),
			    `VSquash (`PushButton (`id("add_forwarder"), `opt(`hstretch), Label::AddButton()))
			)
		    )
		)
	    ),
	    `HBox (
		`HWeight (7,
		    // Selectionbox - listing current forwarders
		    `SelectionBox (`id("zone_forwarders_list"), `opt(`hstretch), _("Current &Zone Forwarders"), [])
		),
		`HWeight (2,
		    `VBox (
			`VSquash (`VSpacing (1) ),
			`VSquash (`PushButton (`id("delete_forwarder"), `opt(`hstretch), Label::DeleteButton())),
			`VStretch ()
		    )
		)
	    )
	);

    // dialog caption
    string caption = _("Forward Zone Editor");

    Wizard::SetContentsButtons (caption, contents, HELPS["forward_zone"]:"",
        Label::CancelButton(), Label::OKButton());
    UI::ChangeWidget (`id ("new_forwarder"), `ValidChars, IP::ValidChars4);

    InitTableOfZOneForwarders();
    
    any ret = nil;

    while (true) {
	ret = UI::UserInput();

	if (ret == `abort || ret == `cancel) {
	    if (ReallyAbort())
		return `abort;
	    else
		continue;
	} else if (ret == `back) {
	    break;
	} else if (ret == "add_forwarder") {
	    ForwardZone_AddZoneForwarder();
	    continue;
	} else if (ret == "delete_forwarder") {
	    ForwardZone_DeleteZoneForwarder();
	    continue;
	} else if (ret == `next) {
	    if (size(current_zone_forwarders) == 0) {
		// TRANSLATORS: popup question
		if (! Popup::YesNo(_("This forward zone has no forwarders defined, which means
that all DNS queries for this zone are denied.
Really deny these queries?"))) {
		    continue;
		}
	    }
	
	    y2milestone("Zone %1 (%2), Forwarders: %3",
		current_zone["zone"]:"",
		Punycode::DecodeDomainName(current_zone["zone"]:""),
		current_zone_forwarders
	    );
	    current_zone["modified"] = true;
	    if (size(current_zone_forwarders) > 0) {
		current_zone["forwarders"] = sformat("{ %1; }", mergestring(current_zone_forwarders, "; "));
	    } else {
		current_zone["forwarders"] = "{}";
	    }
	    DnsServer::StoreCurrentZone (current_zone);
	    DnsServer::StoreZone ();
	    DnsServer::SetModified ();
	    break;
	} else {
	    y2error("Unexpected return %1", ret);
	}
    }

    if (ret == `next)
    {
	current_zone["modified"] = true;
    }
    // empty the list
    current_zone_forwarders = [];
    was_editing_zone = true;

    return (symbol) ret;
}

/* EOF */
}
