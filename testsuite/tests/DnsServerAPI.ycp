/**
 * File:	DNSServerAPI.ycp
 * Package:	Configuration of dns-server
 * Summary:	Testsuite for APIv2
 * Authors:	Lukas Ocilka <locilka@suse.cz>
 * Copyright:	Copyright 2004, Novell, Inc.  All rights reserved.
 *
 * $Id: DnsServerAPI.ycp 48293 2008-06-13 13:24:54Z locilka $
 */

{
    include "testsuite.ycp";
    // testedfiles: DnsServerAPI.pm DnsZones.pm DnsServer.pm

    map READ = $[
	"passwd" : $[ "passwd" : $[ "pluslines" : [] ] ],
	"probe" : $[
	    "architecture" : "i386",
	    "has_apm" : true,
	    "has_pcmcia" : false,
	    "has_smp" : false,
	    "system" : [],
	    "memory" : [],
	    "cpu" : [],
	    "cdrom" : $[
		"manual" : [],
	    ],
	    "floppy" : $[
		"manual" : [],
	    ],
	    "is_uml" : false,
	],
	"product" : $[
	    "features" : $[
		"USE_DESKTOP_SCHEDULER" : "0",
		"IO_SCHEDULER" : "cfg",
		"UI_MODE" : "expert",
		"ENABLE_AUTOLOGIN" : "0",
		"EVMS_CONFIG" : "0",
	    ],
	],

	// Runlevel
        "init": $[
            "scripts": $[
                "exists": true,
                "runlevel": $[
                    "named": $[
                        "start": [],
                        "stop":  [],
                        ],
                    ],
                // their contents is not important for ServiceAdjust
                "comment": $[
                    "named": $[],
                    ],
                ],
            ],
	"dns" : $[
	    "named" : $[
		"section" : $[
		    "options" : "",
		    "zone \"localhost\" in" : "",
		],
		"value" : $[
		    "options" : $[
			"directory" : ["\"/var/lib/named\""],
			"notify" : ["no"],
		    ],
		    "zone \"localhost\" in" : $[
			"type" : ["master"],
			"file" : ["\"localhost.zone\""],
		    ],
		    "acl" : [],
		],
	    ],
	    "zone" : $[
		"TTL":"1W",
		"records":[
		    $[
			"key":"",
			"type":"NS",
			"value":"@"
		    ], $[
			"key":"",
			"type":"A",
			"value":"127.0.0.1"
		    ], $[
			"key" : "localhost2",
			"type" : "A",
			"value" : "127.0.0.2"
		    ],
		],
		"soa":$[
		    "expiry":"6W",
		    "mail":"root",
		    "minimum":"1W",
		    "refresh":"2D",
		    "retry":"4H",
		    "serial":42,
		    "server":"@",
		    "zone":"@"
		]
	    ],
	],
        "sysconfig" : $[
	    "SuSEfirewall2" : $["FW_ALLOW_FW_TRACEROUTE":"yes", "FW_AUTOPROTECT_SERVICES":"no", "FW_DEV_DMZ":"", "FW_DEV_EXT":"eth-id-00:c0:df:22:c6:a8", "FW_DEV_INT":"", "FW_IPSEC_TRUST":"no", "FW_LOG_ACCEPT_ALL":"no", "FW_LOG_ACCEPT_CRIT":"yes", "FW_LOG_DROP_ALL":"no", "FW_LOG_DROP_CRIT":"yes", "FW_MASQUERADE":"no", "FW_MASQ_NETS":"", "FW_PROTECT_FROM_INTERNAL":"yes", "FW_ROUTE":"no", "FW_SERVICES_DMZ_IP":"", "FW_SERVICES_DMZ_TCP":"", "FW_SERVICES_DMZ_UDP":"", "FW_SERVICES_EXT_IP":"", "FW_SERVICES_EXT_RPC":"nlockmgr status nfs nfs_acl mountd ypserv fypxfrd ypbind ypasswdd", "FW_SERVICES_EXT_TCP":"32768 5801 5901 dixie domain hostname microsoft-ds netbios-dgm netbios-ns netbios-ssn nfs ssh sunrpc", "FW_SERVICES_EXT_UDP":"222 bftp domain ipp sunrpc", "FW_SERVICES_INT_IP":"", "FW_SERVICES_INT_TCP":"ddd eee fff 44 55 66", "FW_SERVICES_INT_UDP":"aaa bbb ccc 11 22 33"],
	    "personal-firewall" : $["REJECT_ALL_INCOMING_CONNECTIONS":""],
	    "network" : $[
		"config" : $[
		    "MODIFY_NAMED_CONF_DYNAMICALLY" : "yes",
		    "MODIFY_RESOLV_CONF_DYNAMICALLY" : "yes",
		    "NETCONFIG_DNS_POLICY" : "auto",
		    "NETCONFIG_DNS_STATIC_SERVERS" : "1.2.3.4",
		],
	    ],
	],
	"target" : $[
	    "stat" : $[
		"atime":1101890288, "ctime":1101890286, "gid":0, "inode":29236,
		"isblock":false, "ischr":false, "isdir":false, "isfifo":false,
		"islink":false, "isreg":true, "issock":false,
		"mtime":1101890286, "nlink":1, "size":804, "uid":0
	    ],
	    "lstat" : $[],
	    "ycp" : $[],
	    "yast2" : $[ "lang2iso.ycp" : $[] ],
	    "size" : 1,
	    "string" : "some text",
	],
    ];
    map WRITE = $[
	"target" : $[
	    "ycp" : true,
	],
    ];
    map EXEC = $[
	"target" : $[
	    "bash_output" : $["exit" : 1, "stdout" : "", "stderr" : ""],
	],
	"passwd" : $[ "init" : true ],
    ];





    TESTSUITE_INIT ([READ, WRITE, EXEC], nil);

    import "DnsServerAPI";
    import "DnsServer";
    import "Mode";
    import "Progress";

    Mode::SetMode("test");

    boolean progress_orig = Progress::set (false);

    DUMP ("==========================================================");

    TEST (``(DnsServerAPI::TimeToSeconds ("3600")), [READ, WRITE, EXEC], nil);
    TEST (``(DnsServerAPI::TimeToSeconds ("1D2h3S")), [READ, WRITE, EXEC], nil);
    TEST (``(DnsServerAPI::TimeToSeconds ("1W3d4h1M")), [READ, WRITE, EXEC], nil);

    DUMP ("==========================================================");

    TEST (``(DnsServerAPI::SecondsToHighestTimeUnit (3600)), [READ, WRITE, EXEC], nil);
    TEST (``(DnsServerAPI::SecondsToHighestTimeUnit (93603)), [READ, WRITE, EXEC], nil);
    TEST (``(DnsServerAPI::SecondsToHighestTimeUnit (878460)), [READ, WRITE, EXEC], nil);

    DUMP ("==========================================================");

    // Reading the current configuration
    TEST (``(DnsServer::Read()), [READ, WRITE, EXEC], nil);

    DUMP ("==========================================================");

    // Adding already created zone
    TEST (``(DnsServerAPI::AddZone("example.com", "forward", $[])), [READ, WRITE, EXEC], nil);

    // Adding new zone
    TEST (``(DnsServerAPI::AddZone("example.com.new", "forward", $[])), [READ, WRITE, EXEC], nil);
    // Setting up invalid forwarder server
    TEST (``(DnsServerAPI::SetZoneForwarders("example.com.new", ["192.168.0.1", "192.168.0.288"])), [READ, WRITE, EXEC], nil);
    TEST (``(DnsServerAPI::SetZoneForwarders("example.com.new", ["192.168.0.1", "192.168.0.2"])), [READ, WRITE, EXEC], nil);
    TEST (``(DnsServerAPI::GetZoneForwarders("example.com.new")), [READ, WRITE, EXEC], nil);

    DUMP ("==========================================================");

    // Adding new zone
    TEST (``(DnsServerAPI::AddZone("example.stop.com", "slave", $["masterserver":"1.2.3.4"])), [READ, WRITE, EXEC], nil);
    // Setting up invalid master servers
    TEST (``(DnsServerAPI::SetZoneMasterServers("example.stop.com", ["192.168.22.1", "192.168.33.2.888"])), [READ, WRITE, EXEC], nil);
    TEST (``(DnsServerAPI::SetZoneMasterServers("example.stop.com", ["192.168.22.1", "192.168.33.2"])), [READ, WRITE, EXEC], nil);
    TEST (``(DnsServerAPI::GetZoneMasterServers("example.stop.com")), [READ, WRITE, EXEC], nil);

    DUMP ("==========================================================");
    
    // Wrong IPv4
    TEST (``(DnsServerAPI::GetReverseIPforIPv4("100.200.300.400")), [READ, WRITE, EXEC], nil);
    TEST (``(DnsServerAPI::GetReverseIPforIPv4("10.20.30.40")), [READ, WRITE, EXEC], nil);
    
    DUMP ("==========================================================");
}
